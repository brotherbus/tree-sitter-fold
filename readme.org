* Introduction

~tree-sitter-fold~ builds on top of the now builtin treesit to provide code folding base on the tree-sitter syntax tree.

The idea of ~tree-sitter-fold~ is very simple: it gets the minimal grammar node around a position in the script file whose type is included in the ~tree-sitter-fold-doldable-node-alist~, and then follows the function defined in ~tree-sitter-fold-range-alist~ to calculate the range to fold. Finally, I mimic the ~hideshow~ mode to create a text overlay in the fold range to hide text.

* Installation

- with ~straight.el~ and ~use-package~:
  #+begin_src emacs-lisp
    (use-package tree-sitter-fold
      :straight (:host github :repo "junyi-hou/tree-sitter-fold" :branch "switch-to-treesit"))
  #+end_src

- manual:
 #+begin_src shell
   git clone -b switch-to-treesit https://github.com/junyi-hou/tree-sitter-fold /path/to/lib
 #+end_src
 then in ~emacs~:
 #+begin_src emacs-lisp
   (add-to-list 'load-path "/path/to/lib")
   (require 'tree-sitter-fold)
 #+end_src

* Usage

~tree-sitter-fold-close~: fold the current syntax node.

~tree-sitter-fold-open~: open all folds inside the current syntax node.

~tree-sitter-fold-open-recursively~: open the outmost fold of the current syntax node. Keep the sub-folds close.

~tree-sitter-fold-close-all~: close all foldable syntax nodes in the current buffer.

~tree-sitter-fold-open-all~: open all folded syntax nodes in the current buffer.

* Customization

~tree-sitter-fold~ allows user-defined rules of how to fold syntax nodes. Two variables determine which node is foldable and how ~tree-sitter-fold~ should fold those nodes. I only implement folding mechanisms for ~python~. Contribution on other types of folds and for other major modes are welcome.

** ~tree-sitter-fold-foldable-node-alist~

This is an alist whose keys are ~major-mode~ symbols, and the corresponding values are lists of ~tree-sitter-node-type~ considered foldable in the major mode. ~tree-sitter-fold-close~ will fold only if the node are one of the types defined in this list under the current major mode.

** ~tree-sitter-fold-range-alist~

This variable determines how ~tree-sitter-fold~ should fold each of the nodes defined in ~tree-sitter-fold-foldable-node-alist~. It is a nested alist, with the first key being the major mode, and second key being the ~tree-sitter-node-type~. The value should be a function that takes a ~tree-sitter-node~ as the single argument, and return a cons cell of buffer position as the range should be folded by ~tree-sitter-fold~. See ~tree-sitter-fold-range-python~ for an example.

* Supported languages

- python
- Nix
- YAML
- Go (thanks to [[https://github.com/jakejx][jakejx]])
- contribution of other languages are welcomed!

* Contribution

A good place to start is the [[https://github.com/emacs-mirror/emacs/blob/master/admin/notes/tree-sitter/starter-guide][official treesit document]], where you can read about how to query grammar nodes in tree-sitter. In addition, ~treesit-explore-mode~ can come in handy in terms of seeing the live grammar tree of a script file. Once you understand how to query, you can add new entries in ~tree-sitter-fold-foldable-node-alist~ and ~tree-sitter-fold-range-alist~ to include the folding rule of the new language.

* Note on installing additional grammars

I use [[https://github.com/renzmann/treesit-auto][treesit-auto]] to install additional tree-sitter grammars if needed.

* License

MIT
